
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="styles.css"></link>
    <title>Techical Documentation Page</title>
  </head>
  <body>
    <nav id="navbar">
      <header id="nav-header">JS Documentation</header>
      <ul>
        <li>
          <a class="nav-link" href="#Introduction">Introduction</a>
        </li>
        <li>
          <a class="nav-link" href="#Hello_world">Hello world</a>
        </li>
        <li>
          <a class="nav-link" href="#Declaring_variables">Declaring variables</a>
        </li>
        <li>
          <a class="nav-link" href="#Data_types">Data types</a>
        </li>
        <li>
          <a class="nav-link" href="#if...else_statements">if...else statements</a>
        </li>
        <li>
          <a class="nav-link" href="#Reference">Reference</a>
        </li>
      </ul>
    </nav>
    <main id="main-doc">
      <section class="main-section" id="Introduction">
        <header>Introduction</header>
        <article>
          <p>JavaScript is a cross-platform, object-oriented scripting language. It is a small and lightweight language. Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them.</p>
          <p>JavaScript contains a standard library of objects, such as Array, Date, and Math, and a core set of language elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example:</p>
          <ul>
            <li>Client-side JavaScript extends the core language by supplying objects to control a browser and its Document Object Model (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation.</li>
            <li>Server-side JavaScript extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.</li>
          </ul>
        </article>
      </section>
      <section class="main-section" id="Hello_world">
        <header>Hello world</header>
        <article>
          <p>To get started with writing JavaScript, open the Scratchpad and write your first "Hello world" JavaScript code:</p>
          <code>function greetMe(yourName) { alert("Hello " + yourName); }
  greetMe("World");</code>
          <p>Select the code in the pad and hit Ctrl+R to watch it unfold in your browser!</p>
        </article>
      </section>
      <section class="main-section" id="Declaring_variables">
        <header>Declaring variables</header>
        <article>
          <p>You can declare a variable in 3 ways:</p>
          <p>With the keyword var. For example, </p>
          <code>var x = 42.</code>
          <p>This syntax can be used to declare both local and global variables.</p>
          <p>By simply assigning it a value. For example,</p>
          <code>x = 42.</code>
          <p>This always declares a global variable. It generates a strict JavaScript warning. You shouldn't use this variant.</p>
          <p>With the keyword let. For example,</p>
          <code>let y = 13.</code>
          <p>This syntax can be used to declare a block scope local variable. See Variable scope below.</p>
        </article>
      </section>
      <section class="main-section" id="Data_types">
        <header>Data types</header>
        <article>
          <p>The latest ECMAScript standard defines seven data types:</p>
          <ul>
            <li>Six data types that are the primitives:</li>
            <ul>
              <li>Boolean. True and false.</li>
              <li>Null. A special keyword denoting a null value. Because JavaScript is case-sensitive, null is not the same as Null, NULL, or any other variant.</li>
              <li>Undefined. A top-level property whose value is undefined.</li>
              <li>Number. 42 or 3.14159.</li>
              <li>String. "Howdy"</li>
              <li>Symbol (new in ECMAScript 2015). A data type whose instances are unique and immutable.</li>
            </ul>
            <li>and Object</li>
          </ul>
        </article>
      </section>
      <section class="main-section" id="if...else_statements">
        <header>if...else statements</header>
        <article>
          <p>Use the if statement to execute a statement if a logical condition is true. Use the optional else clause to execute a statement if the condition is false. An if statement looks as follows:</p>
          <code>if (condition) { statement_1; } else { statement_2; }</code>
          <p>condition can be any expression that evaluates to true or false. See Boolean for an explanation of what evaluates to true and false. If condition evaluates to true, statement_1 is executed; otherwise, statement_2 is executed. statement_1 and statement_2 can be any statement, including further nested if statements.</p>
        </article>
      </section>
      <section class="main-section" id="Reference">
        <header>Reference</header>
        <article>
          <p><a href="#Introduction">Reference 1</a></p>
          <p><a href="#Introduction">Reference 2</a></p>
          <p><a href="#Introduction">Reference 3</a></p>
        </article>
      </section>
    </main>
  </body>
</html>

